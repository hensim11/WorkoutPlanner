@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using WorkoutPlanner.Components.Account.Shared
@using WorkoutPlanner.Context
@using WorkoutPlanner.Model
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject QuoteProvider QuoteProvider
@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Login</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<!--below are the boxes and buttons that account for logging in-->

<div class="card w-100 border-0" style="background-color: #b0c4c9; color: #2c3e50; min-height: 100vh;">
    <div class="card-body d-flex flex-column justify-content-start align-items-center" style="background-color: #b0c4c9; color: #2c3e50; padding-top: 50px;">
        <h2 class="card-title mb-4" style="color: #6a8fa0;">Login</h2>
        <EditForm OnValidSubmit="LoginUser" Model="Model" FormName="loginForm">
            <DataAnnotationsValidator /> <!--allows for validation checks to occur-->
            <div class="row g-3">
                <div class="col-12 col-md-8">
                    <label for="email" class="form-label" style="color: #2c3e50;">Email</label>
                    <InputText @bind-Value="Model.Email" class="form-control rounded-3 shadow-sm" style="background-color: #d3e3df; color: #2c3e50; border-color: #6a8fa0;" placeholder="name@example.com" />
                    <div class="small">
                        <ValidationMessage For="@(() => Model!.Email)" />
                    </div>
                </div>
                <div class="col-12 col-md-8">
                    <label for="password" class="form-label" style="color: #2c3e50;">Password</label>
                    <InputText type="password" @bind-Value="Model.Password" class="form-control rounded-3 shadow-sm" style="background-color: #d3e3df; color: #2c3e50; border-color: #6a8fa0;" placeholder="Password" />
                    <div class="small">
                        <ValidationMessage For="@(() => Model!.Password)" />
                    </div>
                </div>
                <div class="col-12 col-md-8 mt-3 d-flex justify-content-between">
                    <button type="submit" class="btn btn-primary px-3" style="background-color: #6a8fa0; border-color: #6a8fa0;">Login</button>
                    <a href="@(NavigationManager.ToAbsoluteUri("Account/Register"))" class="btn btn-outline-secondary px-3" style="color: #2c3e50; border-color: #6a8fa0;">Register</a>
                </div>
            </div>
        </EditForm>
        <div class="card-footer text-center mt-4" style="background-color: #b0c4c9; color: #2c3e50;">
            <p id="randomQuote" style="font-style: italic;">@randomQuote</p>
        </div>
    </div>
</div>




@code {
    private string? statusMessage;
    private bool isError;
    private string randomQuote;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var quote = await QuoteProvider.GetRandomQuoteAsync();
        randomQuote = quote?.QuoteName ?? "No quotes available at the moment.";


        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ApplicationScheme);
        }
    }

    <!--this creates the fnctionality for the login feature-->
    public async Task LoginUser()
    {
       
        var result = await SignInManager.PasswordSignInAsync(Model.Email, Model.Password, false, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo("/");
        }
        else
        {
            statusMessage = "Invalid login attempt. Please enter correct details";
            isError = true;
        }

        
    }

    private sealed class LoginModel
    {
        [Required(ErrorMessage = "*Required")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "*Required")]
        public string Password { get; set; } = "";
    }
}
