@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using WorkoutPlanner.Components.Account.Shared
@using WorkoutPlanner.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>
<StatusMessage Message="@statusMessage" IsError="@isError" />

<div class="card">
    <div class="card-body bg-light">
        <h4 class="card-title">Register</h4>

        <!-- Use EditContext for validation and state management -->
        <EditForm EditContext="editContext" OnValidSubmit="RegisterUser" FormName="registerForm">
            <div class="row g-3">
                <div>
                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1"  @bind="role">
                    <label class="form-check-label" for="flexRadioDefault1">
                        Personal Trainer
                    </label>
                </div>
                <div>
                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2"  @bind="role">
                    <label class="form-check-label" for="flexRadioDefault2">
                        Client
                    </label>
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-primary w-100">Register</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private RegisterModel Model { get; set; } = new();
    private EditContext editContext;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? statusMessage => identityErrors is null ? null : string.Join(" ", identityErrors.Select(error => error.Description));
    private bool isError;
    private string role;

    protected override void OnInitialized()
    {
        editContext = new EditContext(Model); // Initialize EditContext with Model
    }

    private async Task RegisterUser()
    {
        if (role == "Personal Trainer")
        {
            NavigationManager.NavigateTo($"/Account/Register/PersonalTrainer");
        }
        else
        {
            NavigationManager.NavigateTo($"/Account/Register/Client");
        }
    }

    private sealed class RegisterModel
    {
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
        public string ConfirmPassword { get; set; } = "";
    }
}
