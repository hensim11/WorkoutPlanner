@page "/plan"


@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using WorkoutPlanner.Context
@using WorkoutPlanner.Model
@attribute [Authorize]
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject WorkoutProvider WorkoutProvider
@inject UserProvider UserProvider

<h3>Plan</h3>

@* here a table is displayed with the different details of the workout as headings*@
<table class="table">
    <thead>
        <tr>
            <th>Workout Name</th>
            <th>Reps</th>
            <th>Sets</th>
            <th>Weight (kg)</th>
            <th>Rest Time (secs)</th>
            <th>Exercise Info</th>
        </tr>
    </thead>
    <tbody>
        @* this displays the information in the database under the required columns of the table *@
        @if (workouts != null && workouts.Any())
        {
            foreach (var workout in workouts)
            {
                <tr>
                    <td>@workout.ExerciseName</td>
                    <td>@workout.Reps</td>
                    <td>@workout.Sets</td>
                    <td>@workout.Weight</td>
                    <td>@workout.RestTime</td>
                    <td><a href="@($"/info/{workout.Id}")">View Details</a></td>
                </tr>
            }
        }
        else
        {
         @* code to inform the user that workouts cannot be displayed *@
            <tr>
                <td colspan="7" class="text-center">No workouts available</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Workout> workouts;

    protected override async Task OnInitializedAsync()
    {
        workouts = new List<Workout>();

        // Get the logged-in user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity.Name;

        if (!string.IsNullOrEmpty(username))
        {
            // Find the user in the system
            var user = await UserManager.FindByNameAsync(username);

            if (user != null)
            {
                // Fetch workouts linked to the logged-in user
                workouts = await WorkoutProvider.GetWorkoutsForUserAsync(user.Id);
            }
        }
    }
}
