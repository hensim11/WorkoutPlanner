@page "/plan"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using WorkoutPlanner.Context
@using WorkoutPlanner.Model
@attribute [Authorize]
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Plan</h3>

@* here a table is displayed with the different details of the workout as headings*@
<table class="table">
    <thead>
        <tr>
            <th>Workout Name</th>
            <th>Reps</th>
            <th>Sets</th>
            <th>Weight (kg)</th>
            <th>Rest Time (secs)</th>
            <th>Exercise Info</th>
        </tr>
    </thead>
    <tbody>
        @* this displays the information in the database under the required columns of the table *@
        @if (workouts != null && workouts.Any())
        {
            foreach (var workout in workouts)
            {
                <tr>
                    <td>@workout.ExerciseName</td>
                    <td>@workout.Reps</td>
                    <td>@workout.Sets</td>
                    <td>@workout.Weight</td>
                    <td>@workout.RestTime</td>
                    <td><a href="@($"/info/{workout.Id}")">View Details</a></td>
                </tr>
            }
        }
        else
        {
         @* code to inform the user that workouts cannot be displayed *@
            <tr>
                <td colspan="7" class="text-center">No workouts available</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Workout> workouts;

    [Inject]
    private DatabaseContext DbContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Fetch workouts from the database
        workouts = await DbContext.Workouts.ToListAsync();

        // Fetch the logged-in user's ID
        // Get the logged-in user's email
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.Identity?.Name;

        if (!string.IsNullOrEmpty(email))
        {
            // Fetch the user by email
            var user = await UserManager.FindByEmailAsync(email);

            if (user != null)
            {
                // Fetch workouts specific to the logged-in user
                workouts = await DbContext.Workouts
                    .Where(w => w.UserId == user.Id)
                    .ToListAsync();
            }
        }
        else
        {
            workouts = new List<Workout>();
        }
       

    }


}