@page "/plan"

@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using WorkoutPlanner.Context
@using WorkoutPlanner.Model
@attribute [Authorize]
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject WorkoutProvider WorkoutProvider
@inject UserProvider UserProvider
@inject WorkoutPlanProvider WorkoutPlanProvider

<h3>Workouts for @dayName</h3>

@if (isLoading)
{
    <p>Loading workouts...</p>
}
else if (workouts != null && workouts.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Workout Name</th>
                <th>Reps</th>
                <th>Sets</th>
                <th>Weight (kg)</th>
                <th>Rest Time (secs)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var workout in workouts)
            {
                <tr>
                    <td>@workout.ExerciseName</td>
                    <td>@workout.Reps</td>
                    <td>@workout.Sets</td>
                    <td>@workout.Weight</td>
                    <td>@workout.RestTime</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No workouts available for this day.</p>
}

@code {
    private List<Workout> workouts;
    private bool isLoading = true;
    private string dayName;

    [Parameter] public int Week { get; set; }
    [Parameter] public int Day { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var username = authState?.User?.Identity?.Name;

            if (!string.IsNullOrEmpty(username))
            {
                var user = await UserManager.FindByNameAsync(username);
                if (user != null)
                {
                    var weekPlans = await WorkoutPlanProvider.GenerateWorkoutPlanAsync(user.Id, user.DaysAvailable);
                    var planForDay = weekPlans.First(w => w.WeekNumber == Week).Days.First(d => d.DayNumber == Day);

                    if (!planForDay.IsRestDay)
                    {
                        workouts = planForDay.Workouts;
                        dayName = $"Week {Week}, Day {Day}";
                    }
                    else
                    {
                        NavigationManager.NavigateTo("/home");
                    }
                }
            }
        }
        finally
        {
            isLoading = false;
        }
    }
}
