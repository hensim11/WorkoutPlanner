@page "/plan/{week:int}/{day:int}"

@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using WorkoutPlanner.Context
@using WorkoutPlanner.Model
@attribute [Authorize]
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject WorkoutPlanProvider WorkoutPlanProvider
@inject DatabaseContext _context

<h3>Workout for Week @Week, Day @Day</h3>

@if (isLoading)
{
    <p>Loading workouts...</p>
}
else if (isRestDay)
{
    <p>This is a rest day. Take it easy!</p>
}
else if (workouts != null && workouts.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Workout Name</th>
                <th>Reps</th>
                <th>Sets</th>
                <th>Weight (kg)</th>
                <th>Rest Time (secs)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var workout in workouts)
            {
                <tr>
                    <td>@workout.ExerciseName</td>
                    <td>@workout.Reps</td>
                    <td>@workout.Sets</td>
                    <td>@workout.Weight</td>
                    <td>@workout.RestTime</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No workouts available for this day.</p>
}

@code {
    private List<Workout> workouts = new();
    private bool isLoading = true;
    private bool isRestDay = false;

    [Parameter] public int Week { get; set; }
    [Parameter] public int Day { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var username = authState?.User?.Identity?.Name;

            if (string.IsNullOrEmpty(username))
            {
                throw new InvalidOperationException("User not logged in.");
            }

            var user = await UserManager.FindByNameAsync(username);
            if (user == null)
            {
                throw new InvalidOperationException("User not found.");
            }

            // Fetch persisted workout plan
            var weekPlans = await _context.WeekPlans
                .Include(wp => wp.Days)
                .ThenInclude(dp => dp.Workouts)
                .Where(wp => wp.UserId == user.Id)
                .ToListAsync();

            var weekPlan = weekPlans.FirstOrDefault(w => w.WeekNumber == Week);
            if (weekPlan == null)
            {
                throw new InvalidOperationException($"No plan found for week {Week}.");
            }

            var planForDay = weekPlan.Days.FirstOrDefault(d => d.DayNumber == Day);
            if (planForDay == null)
            {
                throw new InvalidOperationException($"No plan found for day {Day} in week {Week}.");
            }

            if (planForDay.IsRestDay)
            {
                isRestDay = true;
                workouts = new List<Workout>();
            }
            else
            {
                isRestDay = false;
                workouts = planForDay.Workouts;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            workouts = new List<Workout>();
        }
        finally
        {
            isLoading = false;
        }
    }
}
}
